name: build all targets with cmake
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
       target: [linux-amd64, linux-i686, linux-armhf, linux-aarch64, windows-x64, windows-x86]
       include:
         - target: linux-amd64
           os: linux
           arch: amd64
           ext: ""
         - target: linux-i686
           os: linux
           arch: i686
           ext: ""
         - target: linux-armhf
           os: linux
           arch: armhf
           ext: ""
         - target: linux-aarch64
           os: linux
           arch: aarch64
           ext: ""
         - target: windows-x64
           os: windows
           arch: x64
           ext: ".exe"
         - target: windows-x86
           os: windows
           arch: x86
           ext: ".exe"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare Build Environemnt
        run: |
             sudo apt-get update
             sudo apt-get -y install build-essential cmake gcc-i686-linux-gnu
             sudo apt-get -y install gcc-arm-linux-gnueabihf pkg-config-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross
             sudo apt-get -y install gcc-mingw-w64-x86-64 gcc-mingw-w64-i686
      - name: Build
        run: |
             ./build_cmake.sh ${{ matrix.target }}
      - name: Create checksum
        run: |
             md5sum build/${{ matrix.target }}/mvdparser${{ matrix.ext }} > build/${{ matrix.target }}/mvdparser.md5
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: |
                build/${{ matrix.target }}/mvdparser${{ matrix.ext }}
          if-no-files-found: ignore
      - name: Deploy
        run: |
             mkdir -p upload/snapshots/${{ matrix.os }}/${{ matrix.arch }}
             mkdir -p upload/snapshots/latest/${{ matrix.os }}/${{ matrix.arch }}
             echo "DATE=output-$(date "+%Y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV
             cp build/${{ matrix.target }}/mvdparser${{ matrix.ext }} upload/snapshots/${{ matrix.os }}/${{ matrix.arch }}/${{ env.OUTPUT }}_${GITHUB_SHA::7}_mvdparser${{ matrix.ext }}
             cp build/${{ matrix.target }}/mvdparser.md5 upload/snapshots/${{ matrix.os }}/${{ matrix.arch }}/${{ env.OUTPUT }}_${GITHUB_SHA::7}_mvdparser.md5
             cp build/${{ matrix.target }}/mvdparser${{ matrix.ext }} upload/snapshots/latest/${{ matrix.os }}/${{ matrix.arch }}/${{ env.OUTPUT }}_${GITHUB_SHA::7}_mvdparser${{ matrix.ext }}
             cp build/${{ matrix.target }}/mvdparser.md5 upload/snapshots/latest/${{ matrix.os }}/${{ matrix.arch }}/${{ env.OUTPUT }}_${GITHUB_SHA::7}_mvdparser.md5
             #openssl aes-256-cbc -K $encrypted_2be706a63e31_key -iv $encrypted_2be706a63e31_iv -in mvdparser_builds.key.enc -out mvdparser_builds.key -d
             #chmod 600 mvdparser_builds.key
             #sftp -q -i mvdparser_builds.key -rp -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile /dev/null' -P ${SFTP_PORT} ${SFTP_USERNAME}@${SFTP_HOST}:/ <<< $'put -rp upload/*'
             sftp -q -i ${{ secrets.SSH_PRIVATE_KEY }} -rp -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile /dev/null' -P ${{ secrets.SFTP_PORT }} ${{ secrets.SFTP_USERNAME }}@${{ secrets.SFTP_HOSTS }}:/ <<< $'put -rp upload/*'
             